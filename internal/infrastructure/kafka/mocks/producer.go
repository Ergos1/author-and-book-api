// Code generated by MockGen. DO NOT EDIT.
// Source: ./producer.go

// Package mock_kafka_producer is a generated GoMock package.
package mock_kafka_producer

import (
	reflect "reflect"

	sarama "github.com/Shopify/sarama"
	gomock "github.com/golang/mock/gomock"
)

// MockProducerOps is a mock of ProducerOps interface.
type MockProducerOps struct {
	ctrl     *gomock.Controller
	recorder *MockProducerOpsMockRecorder
}

// MockProducerOpsMockRecorder is the mock recorder for MockProducerOps.
type MockProducerOpsMockRecorder struct {
	mock *MockProducerOps
}

// NewMockProducerOps creates a new mock instance.
func NewMockProducerOps(ctrl *gomock.Controller) *MockProducerOps {
	mock := &MockProducerOps{ctrl: ctrl}
	mock.recorder = &MockProducerOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerOps) EXPECT() *MockProducerOpsMockRecorder {
	return m.recorder
}

// SendSyncMessage mocks base method.
func (m *MockProducerOps) SendSyncMessage(message *sarama.ProducerMessage) (int32, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSyncMessage", message)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendSyncMessage indicates an expected call of SendSyncMessage.
func (mr *MockProducerOpsMockRecorder) SendSyncMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSyncMessage", reflect.TypeOf((*MockProducerOps)(nil).SendSyncMessage), message)
}
